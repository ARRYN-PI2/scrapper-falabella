import time
import json
import re
from datetime import datetime
from selenium import webdriver
from selenium.webdriver.chrome.service import Service
from selenium.webdriver.chrome.options import Options
from selenium.webdriver.common.by import By
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from webdriver_manager.chrome import ChromeDriverManager


def limpiar_precio(precio_raw: str) -> str:
    if not precio_raw or precio_raw == "N/A":
        return "N/A"
    match = re.search(r"\$ ?[\d\.\,]+", precio_raw)
    return match.group(0) if match else "N/A"


def scroll_cargar_todos(driver, contenedor_selector="#testId-searchResults-products", max_intentos=30):
    productos_vistos = 0
    intentos = 0
    while intentos < max_intentos:
        contenedor = driver.find_element(By.CSS_SELECTOR, contenedor_selector)
        productos_actuales = contenedor.find_elements(By.CSS_SELECTOR, "a[data-pod='catalyst-pod']")
        cantidad = len(productos_actuales)

        if cantidad == productos_vistos:
            intentos += 1
        else:
            intentos = 0
            productos_vistos = cantidad

        driver.execute_script("window.scrollBy(0, 1200);")
        time.sleep(2)
    return productos_vistos


def extraer_tamano(titulo: str) -> str:
    match = re.search(r'(\d{2,3})\s*("| pulgadas|”|in)', titulo, re.IGNORECASE)
    return match.group(1) + '"' if match else "N/A"


def extraer_precio(pod) -> str:
    precio = "N/A"
    selectores = [
        "span[data-testid='current-price']",
        "div[class*='price']",
        "span[class*='Price']",
        "li[class*='price']",
        "span"
    ]
    for sel in selectores:
        elems = pod.find_elements(By.CSS_SELECTOR, sel)
        for el in elems:
            texto = el.text.strip()
            if "$" in texto:
                return limpiar_precio(texto)
    return precio


def extraer_calificacion_listado(pod) -> str:
    """
    Extrae la calificación directamente desde el listado de productos.
    """
    try:
        calificacion_elem = pod.find_element(By.CSS_SELECTOR, "span[data-rating]")
        return calificacion_elem.get_attribute("data-rating") if calificacion_elem else "N/A"
    except:
        return "N/A"


def extraer_calificacion_ficha(driver) -> str:
    """
    Extrae la calificación desde la ficha del producto (método alternativo).
    Busca span con clase '_text_i8pye_5'.
    """
    try:
        calificacion_elem = driver.find_element(By.CSS_SELECTOR, "span._text_i8pye_5")
        return calificacion_elem.text.strip() if calificacion_elem else "N/A"
    except:
        return "N/A"


def extraer_productos_pagina(driver, contador_inicio=1, abrir_fichas=False):
    scroll_cargar_todos(driver)
    productos_raw = driver.find_elements(By.CSS_SELECTOR, "#testId-searchResults-products a[data-pod='catalyst-pod']")
    print(f"[DEBUG] Total de pods detectados en esta página: {len(productos_raw)}")

    productos = []
    contador = contador_inicio

    for i, pod in enumerate(productos_raw, start=1):
        try:
            link = pod.get_attribute("href")

            img_elem = pod.find_elements(By.CSS_SELECTOR, "img[id^='testId-pod-image']")
            if img_elem:
                imagen = img_elem[0].get_attribute("src") or "N/A"
                titulo = img_elem[0].get_attribute("alt") or "N/A"
            else:
                titulo_elem = pod.find_elements(By.CSS_SELECTOR, "span, h2, h3, p")
                titulo = titulo_elem[0].text.strip() if titulo_elem else "N/A"
                imagen = "N/A"

            if "televisor" not in titulo.lower():
                continue

            marca = titulo.split(" - ")[0] if " - " in titulo else "N/A"
            precio = extraer_precio(pod)
            tamano = extraer_tamano(titulo)

            # Calificación optimizada desde el listado
            calificacion = extraer_calificacion_listado(pod)

            # Si activamos abrir_fichas, también verificamos en la ficha
            if abrir_fichas and calificacion == "N/A":
                original_window = driver.current_window_handle
                driver.execute_script("window.open(arguments[0]);", link)
                driver.switch_to.window(driver.window_handles[-1])
                try:
                    WebDriverWait(driver, 10).until(
                        EC.presence_of_element_located((By.CSS_SELECTOR, "span._text_i8pye_5"))
                    )
                    calificacion = extraer_calificacion_ficha(driver)
                except:
                    calificacion = "0"
                driver.close()
                driver.switch_to.window(original_window)

            producto = {
                "contador_extraccion": contador,
                "titulo": titulo,
                "marca": marca,
                "precio": precio,
                "tamaño": tamano,
                "calificacion": calificacion,
                "fuente": "Falabella",
                "categoria": "Televisores",
                "imagen": imagen,
                "link": link,
                "fecha_extraccion": datetime.now().isoformat(),
                "extraction_status": "success" if precio != "N/A" else "failed"
            }

            productos.append(producto)
            print(f"[DEBUG] Producto {contador}: {marca} | {titulo} | {precio} | {tamano} | Calificación: {calificacion}")
            contador += 1

        except Exception as e:
            print(f"[DEBUG] Error en producto {i}: {e}")

    return productos, contador


def extraer_todas_paginas(limitar_una_pagina=False, abrir_fichas=False):
    options = Options()
    options.add_argument("--headless=new")
    options.add_argument("--disable-gpu")
    options.add_argument("--window-size=1920,1080")

    driver = webdriver.Chrome(service=Service(ChromeDriverManager().install()), options=options)
    driver.get("https://www.falabella.com.co/falabella-co/search?Ntt=Televisores")
    time.sleep(6)

    productos_totales = []
    pagina = 1
    contador = 1

    while True:
        print(f"[DEBUG] Extrayendo página {pagina}...")
        productos, contador = extraer_productos_pagina(driver, contador_inicio=contador, abrir_fichas=abrir_fichas)
        if not productos:
            print("[DEBUG] No se encontraron más productos en esta página, finalizando")
            break

        for p in productos:
            p["pagina"] = pagina
        productos_totales.extend(productos)

        if limitar_una_pagina:
            print("[DEBUG] Limite de una página alcanzado (modo prueba).")
            break

        try:
            driver.execute_script("window.scrollTo(0, document.body.scrollHeight);")
            time.sleep(3)

            posibles_botones = driver.find_elements(By.CSS_SELECTOR, "button[id*='pagination'][id*='arrow-right']")
            if not posibles_botones:
                posibles_botones = driver.find_elements(By.CSS_SELECTOR, "button.btn.pagination-arrow")
            if not posibles_botones:
                posibles_botones = driver.find_elements(By.CSS_SELECTOR, "li[class*='pagination-arrow'] a, a[class*='pagination-arrow']")

            print(f"[DEBUG] Botones de siguiente encontrados: {len(posibles_botones)}")

            if not posibles_botones:
                print("[DEBUG] No hay más páginas, terminando scraping")
                break

            siguiente_btn = posibles_botones[-1]
            primer_producto = driver.find_elements(By.CSS_SELECTOR, "#testId-searchResults-products a[data-pod='catalyst-pod']")[0]

            driver.execute_script("arguments[0].click();", siguiente_btn)
            WebDriverWait(driver, 15).until(EC.staleness_of(primer_producto))

            pagina += 1
            print(f"[DEBUG] Pasando a la página {pagina}")
            time.sleep(4)

        except Exception as e:
            print(f"[DEBUG] No se pudo avanzar a la siguiente página: {e}")
            break

    driver.quit()

    with open("productos.json", "w", encoding="utf-8") as f:
        json.dump(productos_totales, f, ensure_ascii=False, indent=4)

    print(f"[DEBUG] Total {len(productos_totales)} productos guardados en productos.json")
    return productos_totales


if __name__ == "__main__":
    extraer_todas_paginas(limitar_una_pagina=False, abrir_fichas=False)
